CC=gcc

FLAGS=-Wall -Wextra -Wpedantic -mavx2 -march=native -DUSE_OPENMP #-fsanitize=address
#-Wshadow -Wfloat-equal -Wconversion -Wsign-conversion -Wnull-dereference 
LIBS=
INCLUDES=-I/usr/include/suitesparse  -Isrc/headers
CUDA_FLAGS=-DUSE_CUDA #-Wall -Wextra -Wpedantic -mavx2

LIB_FLAGS=-lm   -lsuitesparseconfig -lcxsparse  \
-ftree-vectorize -msse3 -mfpmath=sse -ftree-vectorizer-verbose=5 -fopt-info-vec-missed=output.miss -fopenmp #-fsanitize=address
#-fopenmp  -lopenblas


BUILD_FOLDER := build
TEST_FOLDER=tests
BENCH_FOLDER=benchmarks
SRC_FOLDER := src
DATA_FOLDER := data

BIN_FOLDER := $(BUILD_FOLDER)/bin
OBJ_FOLDER := $(BUILD_FOLDER)/obj

#BATCH_OUT_FOLDER := outputs

#LIB_NAME=lib

LIBS_SRC = $(wildcard $(SRC_FOLDER)/*.c)

TEST_OBJECTS_LIB = $(patsubst $(SRC_FOLDER)/%.c, $(OBJ_FOLDER)/tests/%.o, $(LIBS_SRC)) 
CUDA_OBJECTS = $(patsubst $(SRC_FOLDER)/%.c, $(OBJ_FOLDER)/cuda/%.o, $(LIBS_SRC)) 


TEST_SOURCES := $(wildcard $(TEST_FOLDER)/*.c)
TEST_CUDA_SOURCES := $(wildcard $(TEST_FOLDER)/*.cu)
TEST_OBJECTS := $(patsubst $(TEST_FOLDER)/%.c, $(OBJ_FOLDER)/tests/%.o, $(TEST_SOURCES))



BENCH_SOURCES := $(wildcard $(BENCH_FOLDER)/*.c)

BENCH_OBJECTS := $(foreach opt,0 1 2 3, $(patsubst $(BENCH_FOLDER)/%.c, $(OBJ_FOLDER)/bench/%_O$(opt).o, $(BENCH_SOURCES)))

all: build_tests 

clean:
	rm -rf $(BUILD_FOLDER)


############### TEST COMPILATION SECTION ###############
TEST_BINS := $(patsubst $(TEST_FOLDER)/%.c, $(BIN_FOLDER)/tests/%, $(TEST_SOURCES))
TEST_CUDA_BINS := $(patsubst $(TEST_FOLDER)/%.cu, $(BIN_FOLDER)/tests/cuda/%, $(TEST_CUDA_SOURCES))
# Add a test target
run_tests: build_tests
	@echo "Running tests..."
	@echo "Test binaries: $(TEST_BINS)"
	@for test_bin in $(TEST_BINS); do \
		echo "Running $$test_bin..."; \
		if ! ./$$test_bin; then \
			echo "Test $$test_bin failed!" >&2; \
			exit 1; \
		fi; \
	done
	@for test_bin in $(TEST_CUDA_BINS); do \
		echo "Running $$test_bin..."; \
		if ! ./$$test_bin; then \
			echo "Test $$test_bin failed!" >&2; \
			exit 1; \
		fi; \
	done
	@echo "All tests passed!"

build_tests: $(TEST_BINS) $(TEST_CUDA_BINS)


# BUILD TEST BINS
$(BIN_FOLDER)/tests/%: $(OBJ_FOLDER)/tests/%.o $(TEST_OBJECTS_LIB)
	@mkdir -p $(BIN_FOLDER)/tests
	$(CC) -DUSE_OPENMP $(FLAGS) $^ -o $@ $(LIBS) $(INCLUDES) $(LIB_FLAGS)


# build object files from libs 
$(OBJ_FOLDER)/tests/%.o: $(SRC_FOLDER)/%.c
	@mkdir -p $(OBJ_FOLDER)/tests
	$(CC) -g -O0 -fsanitize=address $(FLAGS) -c $< -o $@ $(LIB_FLAGS) $(INCLUDES)

# BUILD TEST OBJECT FILES FOR BIN
$(OBJ_FOLDER)/tests/%.o: $(TEST_FOLDER)/%.c
	@mkdir -p $(OBJ_FOLDER)/tests
	$(CC) -DUSE_OPENMP $(FLAGS) -c $< -o $@ $(LIBS) $(INCLUDES) $(LIB_FLAGS)

# same for cuda
$(OBJ_FOLDER)/tests/cuda/%.o: $(SRC_FOLDER)/%.c
	@mkdir -p $(OBJ_FOLDER)/cuda
	nvcc -g -O0 -fsanitize=address $(CUDA_FLAGS) -c $< -o $@ $(LIBS) $(INCLUDES)








define BENCH_OBJ_template
$(OBJ_FOLDER)/bench/%_O$(1).o: $(SRC_FOLDER)/%.c
	@mkdir -p $(OBJ_FOLDER)/bench
	$(CC) -O$(1) -fsanitize=address $(CUDA_FLAGS) -c $$< -o $$@ $(LIBS) $(INCLUDES)
endef

$(foreach opt,0 1 2 3,$(eval $(call BENCH_OBJ_template,$(opt))))

############################ Download datasets ############################

	


############################## Test BUILDING SECTION ##############################








############################ CUDA TESTING SECTION ##############################

# Build test cuda object files
$(OBJ_FOLDER)/cuda/%.o: $(TEST_FOLDER)/%.cu
	@mkdir -p $(OBJ_FOLDER)/cuda
	nvcc $(CUDA_FLAGS) -c $< -o $@ $(LIBS) $(INCLUDES)

# Build cuda bins
$(BIN_FOLDER)/cuda/%: $(OBJ_FOLDER)/cuda/%.o $(CUDA_OBJECTS)
	@mkdir -p $(BIN_FOLDER)/cuda
	nvcc $(CUDA_FLAGS) $^ -o $@ $(LIBS) $(INCLUDES)


# BENCHMARKS SECTION
# $(BENCH_OBJECTS)
define BENCH_BIN_template
$(BIN_FOLDER)/bench/%_O$(1): $(OBJ_FOLDER)/bench/%_O$(1).o
	@mkdir -p $(OBJ_FOLDER)/bench 
	$(CC) -O$(1) $(FLAGS) -c $$< -o $$@ $(LIBS) $(INCLUDES)
endef

$(foreach opt,0 1 2 3,$(eval $(call BENCH_BIN_template,$(opt))))